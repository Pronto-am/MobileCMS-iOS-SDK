//
//  Device.swift
//  ProntoSDK
//
//  Created by Bas van Kuijck on 07/03/2018.
//  Copyright Â© 2018 E-sites. All rights reserved.
//

import Foundation
import SwiftyJSON
import Cobalt

/// This class holds the currently registered Device
public class Device: CustomStringConvertible, Codable, Equatable {
    struct Constant {
        static let keychainCurrentDeviceKey = "current-device-data_6"
        static let hasRegisteredDevice = "hasRegisteredDevice"
    }

    enum CodingKeys: String, CodingKey {
        case id
        case deviceToken = "apns_token"
    }

    /// Unique device id, generated by pronto
    internal(set) public var id: String = ""

    /// The apns device token returned from Apple's Push Notification Service
    internal(set) public var deviceToken: String = ""

    /// :nodoc:
    public var description: String {
        return "<Device> [ id: \(id), deviceToken: \(deviceToken) ]"
    }

    /// :nodoc:
    public static func == (lhs: Device, rhs: Device) -> Bool {
        return lhs.id == rhs.id
    }

    deinit {
        NotificationCenter.default.removeObserver(self)
    }
}

// MARK: - Current device
// --------------------------------------------------------

extension Device {
    /// The current registered Device
    ///
    /// Returns `nil` if you haven't registered your device yet.
    ///
    /// You can do so by:
    /// ```
    /// ProntoNotifications().registerForRemoteNotifications()
    /// ```
    public static var current: Device? {
        if !UserDefaults.standard.bool(forKey: Constant.hasRegisteredDevice) {
            return nil
        }
        let jsonData: Data

        #if targetEnvironment(simulator)
        guard let jsonDataTemp = UserDefaults.standard.data(forKey: Constant.keychainCurrentDeviceKey) else {
            return nil
        }
        jsonData = jsonDataTemp
        #else
        guard let jsonDataTemp = ProntoSDK.keychain[data: Constant.keychainCurrentDeviceKey] else {
            return nil
        }
        jsonData = jsonDataTemp
        #endif
        let json = JSON(jsonData)

        do {
            let device = try json.map(to: Device.self)

            NotificationCenter.default.addObserver(device,
                                                   selector: #selector(_clear),
                                                   name: ProntoSDK.Constant.clearNotificationName,
                                                   object: nil)
            return device
        } catch {
            return nil
        }
    }

    @objc
    private func _clear() {
        Device.clearCurrent()
    }

    func store() {
        do {
            let dictionary = try self.encode()
            let json = JSON(dictionary)
            let rawData = try json.rawData()
            #if targetEnvironment(simulator)
            UserDefaults.standard.set(rawData, forKey: Constant.keychainCurrentDeviceKey)
            #else
            ProntoSDK.keychain[data: Constant.keychainCurrentDeviceKey] = rawData
            #endif
            UserDefaults.standard.set(true, forKey: Constant.hasRegisteredDevice)
            UserDefaults.standard.synchronize()
            ProntoLogger.info("Device stored: \(self)")
        } catch let error {
            ProntoLogger.error("Error encoding: \(error)")
        }
    }

    static func clearCurrent() {
        #if targetEnvironment(simulator)
        UserDefaults.standard.removeObject(forKey: Constant.keychainCurrentDeviceKey)
        #else
        ProntoSDK.keychain[data: Constant.keychainCurrentDeviceKey] = nil
        #endif
        UserDefaults.standard.set(false, forKey: Constant.hasRegisteredDevice)
        UserDefaults.standard.synchronize()
    }
}
